// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	messages "github.com/raf924/bot/api/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConnectorClient is the client API for Connector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorClient interface {
	Register(ctx context.Context, in *messages.RegistrationPacket, opts ...grpc.CallOption) (*messages.ConfirmationPacket, error)
	ReadMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Connector_ReadMessagesClient, error)
	ReadCommands(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Connector_ReadCommandsClient, error)
	ReadUserEvents(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Connector_ReadUserEventsClient, error)
	SendMessage(ctx context.Context, in *messages.BotPacket, opts ...grpc.CallOption) (*empty.Empty, error)
}

type connectorClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorClient(cc grpc.ClientConnInterface) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) Register(ctx context.Context, in *messages.RegistrationPacket, opts ...grpc.CallOption) (*messages.ConfirmationPacket, error) {
	out := new(messages.ConfirmationPacket)
	err := c.cc.Invoke(ctx, "/connector.Connector/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) ReadMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Connector_ReadMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Connector_serviceDesc.Streams[0], "/connector.Connector/ReadMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorReadMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_ReadMessagesClient interface {
	Recv() (*messages.MessagePacket, error)
	grpc.ClientStream
}

type connectorReadMessagesClient struct {
	grpc.ClientStream
}

func (x *connectorReadMessagesClient) Recv() (*messages.MessagePacket, error) {
	m := new(messages.MessagePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) ReadCommands(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Connector_ReadCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Connector_serviceDesc.Streams[1], "/connector.Connector/ReadCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorReadCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_ReadCommandsClient interface {
	Recv() (*messages.CommandPacket, error)
	grpc.ClientStream
}

type connectorReadCommandsClient struct {
	grpc.ClientStream
}

func (x *connectorReadCommandsClient) Recv() (*messages.CommandPacket, error) {
	m := new(messages.CommandPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) ReadUserEvents(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Connector_ReadUserEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Connector_serviceDesc.Streams[2], "/connector.Connector/ReadUserEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorReadUserEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_ReadUserEventsClient interface {
	Recv() (*messages.UserPacket, error)
	grpc.ClientStream
}

type connectorReadUserEventsClient struct {
	grpc.ClientStream
}

func (x *connectorReadUserEventsClient) Recv() (*messages.UserPacket, error) {
	m := new(messages.UserPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) SendMessage(ctx context.Context, in *messages.BotPacket, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/connector.Connector/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServer is the server API for Connector service.
// All implementations must embed UnimplementedConnectorServer
// for forward compatibility
type ConnectorServer interface {
	Register(context.Context, *messages.RegistrationPacket) (*messages.ConfirmationPacket, error)
	ReadMessages(*empty.Empty, Connector_ReadMessagesServer) error
	ReadCommands(*empty.Empty, Connector_ReadCommandsServer) error
	ReadUserEvents(*empty.Empty, Connector_ReadUserEventsServer) error
	SendMessage(context.Context, *messages.BotPacket) (*empty.Empty, error)
	mustEmbedUnimplementedConnectorServer()
}

// UnimplementedConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedConnectorServer struct {
}

func (UnimplementedConnectorServer) Register(context.Context, *messages.RegistrationPacket) (*messages.ConfirmationPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedConnectorServer) ReadMessages(*empty.Empty, Connector_ReadMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessages not implemented")
}
func (UnimplementedConnectorServer) ReadCommands(*empty.Empty, Connector_ReadCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCommands not implemented")
}
func (UnimplementedConnectorServer) ReadUserEvents(*empty.Empty, Connector_ReadUserEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadUserEvents not implemented")
}
func (UnimplementedConnectorServer) SendMessage(context.Context, *messages.BotPacket) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedConnectorServer) mustEmbedUnimplementedConnectorServer() {}

// UnsafeConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServer will
// result in compilation errors.
type UnsafeConnectorServer interface {
	mustEmbedUnimplementedConnectorServer()
}

func RegisterConnectorServer(s grpc.ServiceRegistrar, srv ConnectorServer) {
	s.RegisterService(&_Connector_serviceDesc, srv)
}

func _Connector_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RegistrationPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.Connector/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).Register(ctx, req.(*messages.RegistrationPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_ReadMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).ReadMessages(m, &connectorReadMessagesServer{stream})
}

type Connector_ReadMessagesServer interface {
	Send(*messages.MessagePacket) error
	grpc.ServerStream
}

type connectorReadMessagesServer struct {
	grpc.ServerStream
}

func (x *connectorReadMessagesServer) Send(m *messages.MessagePacket) error {
	return x.ServerStream.SendMsg(m)
}

func _Connector_ReadCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).ReadCommands(m, &connectorReadCommandsServer{stream})
}

type Connector_ReadCommandsServer interface {
	Send(*messages.CommandPacket) error
	grpc.ServerStream
}

type connectorReadCommandsServer struct {
	grpc.ServerStream
}

func (x *connectorReadCommandsServer) Send(m *messages.CommandPacket) error {
	return x.ServerStream.SendMsg(m)
}

func _Connector_ReadUserEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).ReadUserEvents(m, &connectorReadUserEventsServer{stream})
}

type Connector_ReadUserEventsServer interface {
	Send(*messages.UserPacket) error
	grpc.ServerStream
}

type connectorReadUserEventsServer struct {
	grpc.ServerStream
}

func (x *connectorReadUserEventsServer) Send(m *messages.UserPacket) error {
	return x.ServerStream.SendMsg(m)
}

func _Connector_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.BotPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.Connector/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).SendMessage(ctx, req.(*messages.BotPacket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connector.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Connector_Register_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Connector_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMessages",
			Handler:       _Connector_ReadMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCommands",
			Handler:       _Connector_ReadCommands_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadUserEvents",
			Handler:       _Connector_ReadUserEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "connector.proto",
}
